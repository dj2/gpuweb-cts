{"version":3,"file":"acosh.spec.js","names":["builtin","description","makeTestGroup","TypeF16","TypeF32","elementType","kAllFloatScalarsAndVectors","kAllIntegerScalarsAndVectors","ShaderValidationTest","kConstantAndOverrideStages","kMinusOneToTwo","stageSupportsType","validateConstOrOverrideBuiltinEval","g","test","desc","params","u","combine","filter","stage","type","beforeAllSubcases","t","selectDeviceOrSkipTestCase","fn","expectedResult","value"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/acosh.spec.ts"],"sourcesContent":["const builtin = 'acosh';\nexport const description = `\nValidation tests for the ${builtin}() builtin.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport {\n  TypeF16,\n  TypeF32,\n  elementType,\n  kAllFloatScalarsAndVectors,\n  kAllIntegerScalarsAndVectors,\n} from '../../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  kConstantAndOverrideStages,\n  kMinusOneToTwo,\n  stageSupportsType,\n  validateConstOrOverrideBuiltinEval,\n} from './const_override_validation.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('values')\n  .desc(\n    `\nValidates that constant evaluation and override evaluation of ${builtin}() rejects invalid values\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kConstantAndOverrideStages)\n      .combine('type', kAllFloatScalarsAndVectors)\n      .filter(u => stageSupportsType(u.stage, u.type))\n      .combine('value', kMinusOneToTwo)\n  )\n  .beforeAllSubcases(t => {\n    if (elementType(t.params.type) === TypeF16) {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(t => {\n    const expectedResult = t.params.value >= 1;\n    validateConstOrOverrideBuiltinEval(\n      t,\n      builtin,\n      expectedResult,\n      t.params.value,\n      t.params.type,\n      t.params.stage\n    );\n  });\n\ng.test('integer_argument')\n  .desc(\n    `\nValidates that scalar and vector integer arguments are rejected by ${builtin}()\n`\n  )\n  .params(u => u.combine('type', [TypeF32, ...kAllIntegerScalarsAndVectors]))\n  .fn(t => {\n    validateConstOrOverrideBuiltinEval(\n      t,\n      builtin,\n      /* expectedResult */ t.params.type === TypeF32,\n      /* value */ 1,\n      t.params.type,\n      'constant'\n    );\n  });\n"],"mappings":";AAAA;AAAA,GAAA,MAAMA,OAAO,GAAG,OAAO,CACvB,OAAO,MAAMC,WAAW,GAAI;AAC5B,2BAA2BD,OAAQ;AACnC,CAAC;AAED,SAASE,aAAa,QAAQ,kDAAkD;AAChF;AACEC,OAAO;AACPC,OAAO;AACPC,WAAW;AACXC,0BAA0B;AAC1BC,4BAA4B;AACvB,mCAAmC;AAC1C,SAASC,oBAAoB,QAAQ,oCAAoC;;AAEzE;AACEC,0BAA0B;AAC1BC,cAAc;AACdC,iBAAiB;AACjBC,kCAAkC;AAC7B,gCAAgC;;AAEvC,OAAO,MAAMC,CAAC,GAAGX,aAAa,CAACM,oBAAoB,CAAC;;AAEpDK,CAAC,CAACC,IAAI,CAAC,QAAQ,CAAC;AACbC,IAAI;AACF;AACL,gEAAgEf,OAAQ;AACxE,CAAC,CACE;;AACAgB,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,OAAO,EAAET,0BAA0B,CAAC;AAC5CS,OAAO,CAAC,MAAM,EAAEZ,0BAA0B,CAAC;AAC3Ca,MAAM,CAAC,CAAAF,CAAC,KAAIN,iBAAiB,CAACM,CAAC,CAACG,KAAK,EAAEH,CAAC,CAACI,IAAI,CAAC,CAAC;AAC/CH,OAAO,CAAC,OAAO,EAAER,cAAc,CAAC,CACpC;;AACAY,iBAAiB,CAAC,CAAAC,CAAC,KAAI;EACtB,IAAIlB,WAAW,CAACkB,CAAC,CAACP,MAAM,CAACK,IAAI,CAAC,KAAKlB,OAAO,EAAE;IAC1CoB,CAAC,CAACC,0BAA0B,CAAC,YAAY,CAAC;EAC5C;AACF,CAAC,CAAC;AACDC,EAAE,CAAC,CAAAF,CAAC,KAAI;EACP,MAAMG,cAAc,GAAGH,CAAC,CAACP,MAAM,CAACW,KAAK,IAAI,CAAC;EAC1Cf,kCAAkC;EAChCW,CAAC;EACDvB,OAAO;EACP0B,cAAc;EACdH,CAAC,CAACP,MAAM,CAACW,KAAK;EACdJ,CAAC,CAACP,MAAM,CAACK,IAAI;EACbE,CAAC,CAACP,MAAM,CAACI,KAAK,CACf;;AACH,CAAC,CAAC;;AAEJP,CAAC,CAACC,IAAI,CAAC,kBAAkB,CAAC;AACvBC,IAAI;AACF;AACL,qEAAqEf,OAAQ;AAC7E,CAAC,CACE;;AACAgB,MAAM,CAAC,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAO,CAAC,MAAM,EAAE,CAACd,OAAO,EAAE,GAAGG,4BAA4B,CAAC,CAAC,CAAC;AAC1EkB,EAAE,CAAC,CAAAF,CAAC,KAAI;EACPX,kCAAkC;EAChCW,CAAC;EACDvB,OAAO;EACP,oBAAqBuB,CAAC,CAACP,MAAM,CAACK,IAAI,KAAKjB,OAAO;EAC9C,WAAY,CAAC;EACbmB,CAAC,CAACP,MAAM,CAACK,IAAI;EACb,UAAU,CACX;;AACH,CAAC,CAAC"}