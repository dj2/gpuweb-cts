{"version":3,"file":"const_override_validation.js","names":["assert","TypeF16","VectorType","elementType","isAbstractType","kMinusOneToTwo","kMinus3PiTo3Pi","Math","PI","kConstantAndOverrideStages","stageSupportsType","stage","type","validateConstOrOverrideBuiltinEval","t","builtin","expectedResult","value","elTy","enables","conversion","width","toString","expectCompileResult","expectPipelineResult","code","constants","o","reference"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/const_override_validation.ts"],"sourcesContent":["import { assert } from '../../../../../../common/util/util.js';\nimport {\n  Type,\n  TypeF16,\n  VectorType,\n  elementType,\n  isAbstractType,\n} from '../../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\n/// An array of values ranging from -1 to 2\nexport const kMinusOneToTwo = [\n  -1.0,\n  -0.9,\n  -0.1,\n  0.0,\n  0.1,\n  0.5,\n  0.9,\n  1.0,\n  1.1,\n  1.5,\n  1.9,\n  2.0,\n] as const;\n\n/// An array of values ranging from -3π to 3π.\nexport const kMinus3PiTo3Pi = [\n  -3 * Math.PI,\n  -2.999 * Math.PI,\n  -2.5 * Math.PI,\n  -2.001 * Math.PI,\n  -2.0 * Math.PI,\n  -1.999 * Math.PI,\n  -1.5 * Math.PI,\n  -1.001 * Math.PI,\n  -1.0 * Math.PI,\n  -0.999 * Math.PI,\n  -0.5 * Math.PI,\n  -0.001,\n  0,\n  0.001,\n  0.5 * Math.PI,\n  0.999 * Math.PI,\n  1.0 * Math.PI,\n  1.001 * Math.PI,\n  1.5 * Math.PI,\n  1.999 * Math.PI,\n  2.0 * Math.PI,\n  2.5 * Math.PI,\n  2.001 * Math.PI,\n  2.999 * Math.PI,\n  3 * Math.PI,\n] as const;\n\n/// The evaluation stages to test\nexport const kConstantAndOverrideStages = ['constant', 'override'] as const;\n\nexport type ConstantOrOverrideStage = 'constant' | 'override';\n\n/**\n * @returns true if evaluation stage @p stage supports expressions of type @p.\n */\nexport function stageSupportsType(stage: ConstantOrOverrideStage, type: Type) {\n  if (stage === 'override' && isAbstractType(elementType(type)!)) {\n    // Abstract numerics are concretized before being used in an override expression.\n    return false;\n  }\n  return true;\n}\n\n/**\n * Runs a validation test to check that evaluation of @p builtin either evaluates with or without\n * error at shader creation time or pipeline creation time.\n * @param t the ShaderValidationTest\n * @param builtin the name of the builtin\n * @param expectedResult false if an error is expected, true if no error is expected\n * @param value the value to pass to the builtin\n * @param type the type to convert @p value to before passing to the builtin\n * @param stage the evaluation stage\n */\nexport function validateConstOrOverrideBuiltinEval(\n  t: ShaderValidationTest,\n  builtin: string,\n  expectedResult: boolean,\n  value: number,\n  type: Type,\n  stage: ConstantOrOverrideStage\n) {\n  const elTy = elementType(type)!;\n  const enables = elTy === TypeF16 ? 'enable f16;' : '';\n  let conversion = '';\n  if (isAbstractType(elTy)) {\n    if (type instanceof VectorType) {\n      conversion = `vec${type.width}`;\n    }\n  } else {\n    conversion = type.toString();\n  }\n\n  switch (stage) {\n    case 'constant': {\n      t.expectCompileResult(\n        expectedResult,\n        `${enables}\nconst v = ${builtin}(${conversion}(${value}));`\n      );\n      break;\n    }\n    case 'override': {\n      assert(!isAbstractType(elTy));\n      t.expectPipelineResult({\n        expectedResult,\n        code: `${enables}\noverride o : ${elTy.toString()};\nvar<private> v = ${builtin}(${conversion}(o));`,\n        constants: { o: value },\n        reference: ['v'],\n      });\n      break;\n    }\n  }\n}\n"],"mappings":"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"}